#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

// Функция для создания двумерного динамического массива типа int, заполненного случайными числами
int** genRandMatrix(int size, int maxValue) {
    // Создаем указатель на указатель на int и выделяем память для size указателей на int
    int** matrix = new int*[size];
    // Инициализируем генератор случайных чисел
    srand(time(NULL));
    // Заполняем массив случайными числами
    for (int i = 0; i < size; i++) {
        // Генерируем случайное количество элементов для каждой строки
        int sizeRow = rand() % size + 1;
        // Выделяем память для sizeRow элементов типа int и сохраняем указатель на первый элемент в i-й строке
        matrix[i] = new int[sizeRow];
        // Заполняем i-ю строку случайными числами
        for (int j = 0; j < sizeRow; j++) {
            matrix[i][j] = rand() % maxValue + 1;
        }
    }
    // Возвращаем указатель на двумерный динамический массив
    return matrix;
}

// Функция для вывода двумерного динамического массива на экран
void printMatrix(int** matrix, int size) {
    // Проходим по каждой строке массива
    for (int i = 0; i < size; i++) {
        // Выводим номер строки
        cout << i << ": ";
        // Проходим по каждому элементу в i-й строке
        for (int j = 0; j < size; j++) {
            // Если j меньше количества элементов в i-й строке, выводим элемент
            if (j < size) {
                cout << matrix[i][j] << " ";
            }
        }
        // Переходим на новую строку
        cout << endl;
    }
}

int main() {
    // Генерируем случайный размер массива
    int size = rand() % 10 + 1;
    // Задаем максимальное значение для случайных чисел
    int maxValue = 100;
    // Создаем двумерный динамический массив и заполняем его случайными числами
    int** matrix = genRandMatrix(size, maxValue);
    // Выводим содержимое массива на экран
    printMatrix(matrix, size);
    // Освобождаем выделенную память
    for (int i = 0; i < size; i++) {
        delete[] matrix[i];
    }
    delete[] matrix;
    // Возвращаем 0, чтобы указать, что программа завершилась без ошибок
    return 0;
}